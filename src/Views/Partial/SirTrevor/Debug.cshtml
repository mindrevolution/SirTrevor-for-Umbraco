@using MarkdownDeep
@using SirTrevor.DataValue.Blocks
@using SirTrevor.DataValue.Interfaces
@using SirTrevor.DataValue.Objects
@using Umbraco.Web.Templates
@inherits UmbracoViewPage<SirTrevor.DataValue.SirTrevorDataValue>

@helper Markdown(string markdown) {
    // Transform the supplied text (Markdown) into HTML.
    var markdownTransformer = new Markdown();
    string html = TemplateUtilities.ParseInternalLinks(markdownTransformer.Transform(markdown));
    @(new HtmlString(html))
}

<style>
    table tr:nth-child(odd) { background: #efefef; }
    table tr td:first-child { padding-right: 50px; }
    td { vertical-align: top; }
    .unknown .block-type { color: red; }
    .block-type { margin-bottom: 5px; font-weight: bold; }
    .block-value { font-size: 11px; }
</style>

<table>
        
@foreach (IBlock block in Model.Data) {

    switch (block.Type) {

        case "heading": {
            HeadingBlock header = (HeadingBlock) block;
            string formattedHeading = Markdown(header.Text).ToString().Replace("p", header.Type);
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Type: @header.Type</div>
                    <div class="block-value">Text: @header.Text</div>
                </td>
                <td>
                    @Html.Raw(formattedHeading)
                </td>
            </tr>
            break;
        }
                
        case "umbraco_image": {
            UmbracoImageBlock image = (UmbracoImageBlock) block;
            UmbracoMediaItem item = image.Item;
            IPublishedContent media = item.ItemAsPublishedMedia;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Id: @item.Id</div>
                    <div class="block-value">ContentTypeAlias: @item.ContentTypeAlias</div>
                    <div class="block-value">URL: @media.Url</div>
                </td>
                <td>
                    <img src="@media.GetCropUrl(450)" alt="" />
                </td>
            </tr>
            break;
        }
                
        case "umbraco_gallery": {
            UmbracoGalleryBlock gallery = (UmbracoGalleryBlock)block;
            IPublishedContent[] published = gallery.ItemsAsPublishedMedia;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Items: @gallery.Items.Length</div>
                    <div class="block-value">Items (cache): @published.Length</div>
                </td>
                <td>
                    @foreach (var item in gallery.ItemsAsPublishedMedia) {
                        <img src="@item.GetCropUrl(250, 150)" alt="" />
                    }
                </td>
            </tr>
            break;
        }
                
        case "content_picker": {
            ContentPickerBlock picker = (ContentPickerBlock)block;
            IPublishedContent published = picker.ItemAsPublishedContent;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Id: @picker.Item.Id</div>
                    <div class="block-value">Name: @picker.Item.Name</div>
                    <div class="block-value">Cached?: @(published == null ? "No" : "Yes")</div>
                </td>
                <td>
                    @if (published == null) {
                        <em>Not found in the content cache</em>
                    } else {
                        <a href="@published.Url" target="_blank">@published.Name</a>
                    }
                </td>
            </tr>
            break;
        }

        case "text":
        case "list":
        case "ordered_list":
            TextBlock text = (TextBlock) block;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Text: @text.Text</div>
                </td>
                <td>
                    @Markdown(text.Text)
                </td>
            </tr>
            break;

        case "gist":
            GistBlock gist = (GistBlock)block;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Id: @gist.Id</div>
                    <div class="block-value">Url: @gist.Url</div>
                </td>
                <td>
                    <a href="@gist.Url" target="_blank">View Gist <strong>@gist.Id</strong> at gist.github.com</a>
                </td>
            </tr>
            break;

        case "markdown":
            MarkdownBlock markdown = (MarkdownBlock) block;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Text: @markdown.Text</div>
                </td>
                <td>
                    @Markdown(markdown.Text)
                </td>
            </tr>
            break;
                
        case "video":
            VideoBlock video = (VideoBlock) block;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Source: @video.Source</div>
                    <div class="block-value">Remote ID: @video.RemoteId</div>
                </td>
                <td>
                    <em>No example yet</em>
                </td>
            </tr>
            break;
                
        case "quote":
            QuoteBlock quote = (QuoteBlock) block;
            <tr>
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                    <div class="block-value">Cite: @(String.IsNullOrWhiteSpace(quote.Cite) ? "Empty" : quote.Cite)</div>
                    <div class="block-value">Text: @quote.Text</div>
                </td>
                <td>
                    <blockquote>
                        <p>@quote.Text</p>
                        <footer>
                            <cite>@quote.Cite</cite>
                        </footer>
                    </blockquote>
                </td>
            </tr>
            break;
                    
        default: {
            <tr class="unknown">
                <td>
                    <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                </td>
                <td>
                    <pre>@block.Json</pre>
                </td>
            </tr>
            break;
        }

    }
            
}
            
</table>