@using MarkdownDeep
@using SirTrevor.DataValue.Blocks
@using SirTrevor.DataValue.Interfaces
@using SirTrevor.DataValue.Objects
@using Umbraco.Web.Templates
@inherits UmbracoViewPage<SirTrevor.DataValue.SirTrevorDataValue>

@helper Markdown(string markdown) {
    // Transform the supplied text (Markdown) into HTML.
    var markdownTransformer = new Markdown();
    string html = TemplateUtilities.ParseInternalLinks(markdownTransformer.Transform(markdown));
    @(new HtmlString(html))
}

<div class="SirTrevor">
        
@foreach (IBlock block in Model.Data) {

    switch (block.Type) {

        case "heading": {
            HeadingBlock header = (HeadingBlock) block;
            string formattedHeading = Markdown(header.Text).ToString().Replace("p", header.Tag);
            @Html.Raw(formattedHeading)
            break;
        }
                
        case "umbraco_image": {
            UmbracoImageBlock image = (UmbracoImageBlock) block;
            UmbracoMediaItem item = image.Item;
            IPublishedContent media = item.ItemAsPublishedMedia;
            <div class="SirTrevorImage">
                <img src="@media.GetCropUrl(450)" alt="" />
            </div>
            break;
        }
                
        case "umbraco_gallery": {
            UmbracoGalleryBlock gallery = (UmbracoGalleryBlock)block;
            <div class="SirTrevorGallery">
                @foreach (var item in gallery.ItemsAsPublishedMedia) {
                    <img src="@item.GetCropUrl(250, 150)" alt="" />
                }
            </div>
            break;
        }
                
        case "content_picker": {
            ContentPickerBlock picker = (ContentPickerBlock)block;
            IPublishedContent published = picker.ItemAsPublishedContent;
            <div>
                @if (published != null) {
                    <a href="@published.Url" target="_blank">@published.Name</a>
                }
            </div>
            break;
        }

        case "text":
        case "list":
        case "ordered_list":
            TextBlock text = (TextBlock) block;
            @Markdown(text.Text)
            break;

        case "gist":
            GistBlock gist = (GistBlock)block;
            <a href="@gist.Url" target="_blank">View Gist <strong>@gist.Id</strong> at gist.github.com</a>
            break;

        case "markdown":
            MarkdownBlock markdown = (MarkdownBlock) block;
            @Markdown(markdown.Text)
            break;
                
        case "video":
            VideoBlock video = (VideoBlock) block;
            <em>No example yet</em>
            break;
                
        case "quote":
            QuoteBlock quote = (QuoteBlock) block;
            <blockquote>
                <p>@quote.Text</p>
                <footer>
                    <cite>@quote.Cite</cite>
                </footer>
            </blockquote>
            break;
                
                @*case "soundcloud": {
                    SoundCloudBlock sc = (SoundCloudBlock) block;
                    string encodedUrl = HttpUtility.UrlEncode(sc.Url); //  "https%3A//api.soundcloud.com/tracks/143247536";
                    <tr>
                        <td>
                            <div class="block-type" title="@block.GetType()">@block.GetType().Name (@block.Type)</div>
                            <div class="block-value">URL: @sc.Url</div>
                        </td>
                        <td>
                            <iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=@encodedUrl&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_artwork=true&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>
                        </td>
                    </tr>
                    break;
                }*@
                    
        default: {
            // We don't generate any output if the block is unknown
            break;
        }

    }
            
}
            
</div>